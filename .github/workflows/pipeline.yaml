name: CI Tests

env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - develop/**
  pull_request:
    branches:
      - master
    types: [opened, closed]

jobs:

  code-review:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - run: npm ci

      - name: Run ESLint
        run: npx eslint .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2

      - name: Run ESLint with coverage
        run: npm run lint:coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  unit-tests:
    runs-on: ubuntu-20.04
    needs: code-review

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 18.x
      uses: actions/setup-node@v2
      with:
        node-version: 18.x
    - run: npm ci
    - run: npm run test

  sca:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

  sast:
    needs: sca

    runs-on: ubuntu-latest
    
    container:
      image: returntocorp/semgrep
    steps:
      - name: clone application source code
        uses: actions/checkout@v3
      - name: full scan
        run: |
          semgrep \
            --sarif --output report.sarif \
            --metrics=off \
            --config="p/default" 
      - name: save report as pipeline artifact
        uses: actions/upload-artifact@v3
        with:
          name: report.sarif
          path: report.sarif     
      - name: Download report
        uses: actions/download-artifact@v2
        with: 
          name: report.sarif
  
  dast:
    if: github.event_name == 'pull_request'

    needs: [sca, sast]

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: 'https://www.zaproxy.org/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  deploy-test:
    needs: sast

    if: startsWith(github.ref, 'refs/heads/develop/')

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    needs: dast

    if: github.ref == 'refs/heads/master' && github.event.pull_request.merged == true

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: 
          npm ci